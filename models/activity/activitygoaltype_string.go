// Code generated by "enumer -type=ActivityGoalType -json -output activitygoaltype_string.go -trimprefix ActivityGoalType -transform snake-upper"; DO NOT EDIT.

package activity

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActivityGoalTypeName = "UNDEFINEDDISTANCEDURATIONCALORIESAVG_HEART_RATEAVG_SPEEDAVG_PACEIN_HR_ZONEBELOW_HR_ZONEABOVE_HR_ZONE"

var _ActivityGoalTypeIndex = [...]uint8{0, 9, 17, 25, 33, 47, 56, 64, 74, 87, 100}

const _ActivityGoalTypeLowerName = "undefineddistancedurationcaloriesavg_heart_rateavg_speedavg_pacein_hr_zonebelow_hr_zoneabove_hr_zone"

func (i ActivityGoalType) String() string {
	if i < 0 || i >= ActivityGoalType(len(_ActivityGoalTypeIndex)-1) {
		return fmt.Sprintf("ActivityGoalType(%d)", i)
	}
	return _ActivityGoalTypeName[_ActivityGoalTypeIndex[i]:_ActivityGoalTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActivityGoalTypeNoOp() {
	var x [1]struct{}
	_ = x[ActivityGoalTypeUndefined-(0)]
	_ = x[ActivityGoalTypeDistance-(1)]
	_ = x[ActivityGoalTypeDuration-(2)]
	_ = x[ActivityGoalTypeCalories-(3)]
	_ = x[ActivityGoalTypeAvgHeartRate-(4)]
	_ = x[ActivityGoalTypeAvgSpeed-(5)]
	_ = x[ActivityGoalTypeAvgPace-(6)]
	_ = x[ActivityGoalTypeInHrZone-(7)]
	_ = x[ActivityGoalTypeBelowHrZone-(8)]
	_ = x[ActivityGoalTypeAboveHrZone-(9)]
}

var _ActivityGoalTypeValues = []ActivityGoalType{ActivityGoalTypeUndefined, ActivityGoalTypeDistance, ActivityGoalTypeDuration, ActivityGoalTypeCalories, ActivityGoalTypeAvgHeartRate, ActivityGoalTypeAvgSpeed, ActivityGoalTypeAvgPace, ActivityGoalTypeInHrZone, ActivityGoalTypeBelowHrZone, ActivityGoalTypeAboveHrZone}

var _ActivityGoalTypeNameToValueMap = map[string]ActivityGoalType{
	_ActivityGoalTypeName[0:9]:         ActivityGoalTypeUndefined,
	_ActivityGoalTypeLowerName[0:9]:    ActivityGoalTypeUndefined,
	_ActivityGoalTypeName[9:17]:        ActivityGoalTypeDistance,
	_ActivityGoalTypeLowerName[9:17]:   ActivityGoalTypeDistance,
	_ActivityGoalTypeName[17:25]:       ActivityGoalTypeDuration,
	_ActivityGoalTypeLowerName[17:25]:  ActivityGoalTypeDuration,
	_ActivityGoalTypeName[25:33]:       ActivityGoalTypeCalories,
	_ActivityGoalTypeLowerName[25:33]:  ActivityGoalTypeCalories,
	_ActivityGoalTypeName[33:47]:       ActivityGoalTypeAvgHeartRate,
	_ActivityGoalTypeLowerName[33:47]:  ActivityGoalTypeAvgHeartRate,
	_ActivityGoalTypeName[47:56]:       ActivityGoalTypeAvgSpeed,
	_ActivityGoalTypeLowerName[47:56]:  ActivityGoalTypeAvgSpeed,
	_ActivityGoalTypeName[56:64]:       ActivityGoalTypeAvgPace,
	_ActivityGoalTypeLowerName[56:64]:  ActivityGoalTypeAvgPace,
	_ActivityGoalTypeName[64:74]:       ActivityGoalTypeInHrZone,
	_ActivityGoalTypeLowerName[64:74]:  ActivityGoalTypeInHrZone,
	_ActivityGoalTypeName[74:87]:       ActivityGoalTypeBelowHrZone,
	_ActivityGoalTypeLowerName[74:87]:  ActivityGoalTypeBelowHrZone,
	_ActivityGoalTypeName[87:100]:      ActivityGoalTypeAboveHrZone,
	_ActivityGoalTypeLowerName[87:100]: ActivityGoalTypeAboveHrZone,
}

var _ActivityGoalTypeNames = []string{
	_ActivityGoalTypeName[0:9],
	_ActivityGoalTypeName[9:17],
	_ActivityGoalTypeName[17:25],
	_ActivityGoalTypeName[25:33],
	_ActivityGoalTypeName[33:47],
	_ActivityGoalTypeName[47:56],
	_ActivityGoalTypeName[56:64],
	_ActivityGoalTypeName[64:74],
	_ActivityGoalTypeName[74:87],
	_ActivityGoalTypeName[87:100],
}

// ActivityGoalTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActivityGoalTypeString(s string) (ActivityGoalType, error) {
	if val, ok := _ActivityGoalTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActivityGoalTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActivityGoalType values", s)
}

// ActivityGoalTypeValues returns all values of the enum
func ActivityGoalTypeValues() []ActivityGoalType {
	return _ActivityGoalTypeValues
}

// ActivityGoalTypeStrings returns a slice of all String values of the enum
func ActivityGoalTypeStrings() []string {
	strs := make([]string, len(_ActivityGoalTypeNames))
	copy(strs, _ActivityGoalTypeNames)
	return strs
}

// IsAActivityGoalType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActivityGoalType) IsAActivityGoalType() bool {
	for _, v := range _ActivityGoalTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActivityGoalType
func (i ActivityGoalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActivityGoalType
func (i *ActivityGoalType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActivityGoalType should be a string, got %s", data)
	}

	var err error
	*i, err = ActivityGoalTypeString(s)
	return err
}
