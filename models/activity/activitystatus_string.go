// Code generated by "enumer -type=ActivityStatus -json -text -output activitystatus_string.go -trimprefix ActivityStatus -transform snake-upper"; DO NOT EDIT.

package activity

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActivityStatusName = "UNDEFINEDNOT_STARTEDIN_PROGRESSPAUSEDFINISHEDCANCELED"

var _ActivityStatusIndex = [...]uint8{0, 9, 20, 31, 37, 45, 53}

const _ActivityStatusLowerName = "undefinednot_startedin_progresspausedfinishedcanceled"

func (i ActivityStatus) String() string {
	if i < 0 || i >= ActivityStatus(len(_ActivityStatusIndex)-1) {
		return fmt.Sprintf("ActivityStatus(%d)", i)
	}
	return _ActivityStatusName[_ActivityStatusIndex[i]:_ActivityStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActivityStatusNoOp() {
	var x [1]struct{}
	_ = x[ActivityStatusUndefined-(0)]
	_ = x[ActivityStatusNotStarted-(1)]
	_ = x[ActivityStatusInProgress-(2)]
	_ = x[ActivityStatusPaused-(3)]
	_ = x[ActivityStatusFinished-(4)]
	_ = x[ActivityStatusCanceled-(5)]
}

var _ActivityStatusValues = []ActivityStatus{ActivityStatusUndefined, ActivityStatusNotStarted, ActivityStatusInProgress, ActivityStatusPaused, ActivityStatusFinished, ActivityStatusCanceled}

var _ActivityStatusNameToValueMap = map[string]ActivityStatus{
	_ActivityStatusName[0:9]:        ActivityStatusUndefined,
	_ActivityStatusLowerName[0:9]:   ActivityStatusUndefined,
	_ActivityStatusName[9:20]:       ActivityStatusNotStarted,
	_ActivityStatusLowerName[9:20]:  ActivityStatusNotStarted,
	_ActivityStatusName[20:31]:      ActivityStatusInProgress,
	_ActivityStatusLowerName[20:31]: ActivityStatusInProgress,
	_ActivityStatusName[31:37]:      ActivityStatusPaused,
	_ActivityStatusLowerName[31:37]: ActivityStatusPaused,
	_ActivityStatusName[37:45]:      ActivityStatusFinished,
	_ActivityStatusLowerName[37:45]: ActivityStatusFinished,
	_ActivityStatusName[45:53]:      ActivityStatusCanceled,
	_ActivityStatusLowerName[45:53]: ActivityStatusCanceled,
}

var _ActivityStatusNames = []string{
	_ActivityStatusName[0:9],
	_ActivityStatusName[9:20],
	_ActivityStatusName[20:31],
	_ActivityStatusName[31:37],
	_ActivityStatusName[37:45],
	_ActivityStatusName[45:53],
}

// ActivityStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActivityStatusString(s string) (ActivityStatus, error) {
	if val, ok := _ActivityStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActivityStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActivityStatus values", s)
}

// ActivityStatusValues returns all values of the enum
func ActivityStatusValues() []ActivityStatus {
	return _ActivityStatusValues
}

// ActivityStatusStrings returns a slice of all String values of the enum
func ActivityStatusStrings() []string {
	strs := make([]string, len(_ActivityStatusNames))
	copy(strs, _ActivityStatusNames)
	return strs
}

// IsAActivityStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActivityStatus) IsAActivityStatus() bool {
	for _, v := range _ActivityStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActivityStatus
func (i ActivityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActivityStatus
func (i *ActivityStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActivityStatus should be a string, got %s", data)
	}

	var err error
	*i, err = ActivityStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ActivityStatus
func (i ActivityStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ActivityStatus
func (i *ActivityStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = ActivityStatusString(string(text))
	return err
}
