// Code generated by "enumer -type=HeartRateZone -json -output heartratezone_string.go -trimprefix HeartRateZone -transform snake-upper"; DO NOT EDIT.

package activity

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _HeartRateZoneName = "UNDEFINEDAT_RESTWARM_UPFAT_BURNAEROBICANAEROBICVO2_MAX"

var _HeartRateZoneIndex = [...]uint8{0, 9, 16, 23, 31, 38, 47, 54}

const _HeartRateZoneLowerName = "undefinedat_restwarm_upfat_burnaerobicanaerobicvo2_max"

func (i HeartRateZone) String() string {
	if i < 0 || i >= HeartRateZone(len(_HeartRateZoneIndex)-1) {
		return fmt.Sprintf("HeartRateZone(%d)", i)
	}
	return _HeartRateZoneName[_HeartRateZoneIndex[i]:_HeartRateZoneIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HeartRateZoneNoOp() {
	var x [1]struct{}
	_ = x[HeartRateZoneUndefined-(0)]
	_ = x[HeartRateZoneAtRest-(1)]
	_ = x[HeartRateZoneWarmUp-(2)]
	_ = x[HeartRateZoneFatBurn-(3)]
	_ = x[HeartRateZoneAerobic-(4)]
	_ = x[HeartRateZoneAnaerobic-(5)]
	_ = x[HeartRateZoneVo2Max-(6)]
}

var _HeartRateZoneValues = []HeartRateZone{HeartRateZoneUndefined, HeartRateZoneAtRest, HeartRateZoneWarmUp, HeartRateZoneFatBurn, HeartRateZoneAerobic, HeartRateZoneAnaerobic, HeartRateZoneVo2Max}

var _HeartRateZoneNameToValueMap = map[string]HeartRateZone{
	_HeartRateZoneName[0:9]:        HeartRateZoneUndefined,
	_HeartRateZoneLowerName[0:9]:   HeartRateZoneUndefined,
	_HeartRateZoneName[9:16]:       HeartRateZoneAtRest,
	_HeartRateZoneLowerName[9:16]:  HeartRateZoneAtRest,
	_HeartRateZoneName[16:23]:      HeartRateZoneWarmUp,
	_HeartRateZoneLowerName[16:23]: HeartRateZoneWarmUp,
	_HeartRateZoneName[23:31]:      HeartRateZoneFatBurn,
	_HeartRateZoneLowerName[23:31]: HeartRateZoneFatBurn,
	_HeartRateZoneName[31:38]:      HeartRateZoneAerobic,
	_HeartRateZoneLowerName[31:38]: HeartRateZoneAerobic,
	_HeartRateZoneName[38:47]:      HeartRateZoneAnaerobic,
	_HeartRateZoneLowerName[38:47]: HeartRateZoneAnaerobic,
	_HeartRateZoneName[47:54]:      HeartRateZoneVo2Max,
	_HeartRateZoneLowerName[47:54]: HeartRateZoneVo2Max,
}

var _HeartRateZoneNames = []string{
	_HeartRateZoneName[0:9],
	_HeartRateZoneName[9:16],
	_HeartRateZoneName[16:23],
	_HeartRateZoneName[23:31],
	_HeartRateZoneName[31:38],
	_HeartRateZoneName[38:47],
	_HeartRateZoneName[47:54],
}

// HeartRateZoneString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HeartRateZoneString(s string) (HeartRateZone, error) {
	if val, ok := _HeartRateZoneNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HeartRateZoneNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HeartRateZone values", s)
}

// HeartRateZoneValues returns all values of the enum
func HeartRateZoneValues() []HeartRateZone {
	return _HeartRateZoneValues
}

// HeartRateZoneStrings returns a slice of all String values of the enum
func HeartRateZoneStrings() []string {
	strs := make([]string, len(_HeartRateZoneNames))
	copy(strs, _HeartRateZoneNames)
	return strs
}

// IsAHeartRateZone returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HeartRateZone) IsAHeartRateZone() bool {
	for _, v := range _HeartRateZoneValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HeartRateZone
func (i HeartRateZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HeartRateZone
func (i *HeartRateZone) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HeartRateZone should be a string, got %s", data)
	}

	var err error
	*i, err = HeartRateZoneString(s)
	return err
}
