// Code generated by "enumer -type=ActivityType -json -output activitytype_string.go -trimprefix ActivityType -transform snake-upper"; DO NOT EDIT.

package activity

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActivityTypeName = "UNDEFINEDRUNWALKCYCLINGOTHER"

var _ActivityTypeIndex = [...]uint8{0, 9, 12, 16, 23, 28}

const _ActivityTypeLowerName = "undefinedrunwalkcyclingother"

func (i ActivityType) String() string {
	if i < 0 || i >= ActivityType(len(_ActivityTypeIndex)-1) {
		return fmt.Sprintf("ActivityType(%d)", i)
	}
	return _ActivityTypeName[_ActivityTypeIndex[i]:_ActivityTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActivityTypeNoOp() {
	var x [1]struct{}
	_ = x[ActivityTypeUndefined-(0)]
	_ = x[ActivityTypeRun-(1)]
	_ = x[ActivityTypeWalk-(2)]
	_ = x[ActivityTypeCycling-(3)]
	_ = x[ActivityTypeOther-(4)]
}

var _ActivityTypeValues = []ActivityType{ActivityTypeUndefined, ActivityTypeRun, ActivityTypeWalk, ActivityTypeCycling, ActivityTypeOther}

var _ActivityTypeNameToValueMap = map[string]ActivityType{
	_ActivityTypeName[0:9]:        ActivityTypeUndefined,
	_ActivityTypeLowerName[0:9]:   ActivityTypeUndefined,
	_ActivityTypeName[9:12]:       ActivityTypeRun,
	_ActivityTypeLowerName[9:12]:  ActivityTypeRun,
	_ActivityTypeName[12:16]:      ActivityTypeWalk,
	_ActivityTypeLowerName[12:16]: ActivityTypeWalk,
	_ActivityTypeName[16:23]:      ActivityTypeCycling,
	_ActivityTypeLowerName[16:23]: ActivityTypeCycling,
	_ActivityTypeName[23:28]:      ActivityTypeOther,
	_ActivityTypeLowerName[23:28]: ActivityTypeOther,
}

var _ActivityTypeNames = []string{
	_ActivityTypeName[0:9],
	_ActivityTypeName[9:12],
	_ActivityTypeName[12:16],
	_ActivityTypeName[16:23],
	_ActivityTypeName[23:28],
}

// ActivityTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActivityTypeString(s string) (ActivityType, error) {
	if val, ok := _ActivityTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActivityTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActivityType values", s)
}

// ActivityTypeValues returns all values of the enum
func ActivityTypeValues() []ActivityType {
	return _ActivityTypeValues
}

// ActivityTypeStrings returns a slice of all String values of the enum
func ActivityTypeStrings() []string {
	strs := make([]string, len(_ActivityTypeNames))
	copy(strs, _ActivityTypeNames)
	return strs
}

// IsAActivityType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActivityType) IsAActivityType() bool {
	for _, v := range _ActivityTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActivityType
func (i ActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActivityType
func (i *ActivityType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActivityType should be a string, got %s", data)
	}

	var err error
	*i, err = ActivityTypeString(s)
	return err
}
